import React, { useEffect, useMemo, useState, useCallback } from "react";
import {
  Box,
  Card,
  CardContent,
  CardHeader,
  Typography,
  Tabs,
  Tab,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  TextField,
  Switch,
  FormControlLabel,
  Tooltip,
  Chip,
  Divider,
  Stack,
  Button,
  Snackbar,
  Alert,
  InputAdornment,
  CircularProgress,
  Paper,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import InfoOutlinedIcon from "@mui/icons-material/InfoOutlined";
import EnergySavingsLeafIcon from "@mui/icons-material/EnergySavingsLeaf";
import WaterDropIcon from "@mui/icons-material/WaterDrop";
import RecyclingIcon from "@mui/icons-material/Recycling";
import WhatshotIcon from "@mui/icons-material/Whatshot";
import GroupsIcon from "@mui/icons-material/Groups";
import VerifiedUserIcon from "@mui/icons-material/VerifiedUser";
import PeopleAltIcon from "@mui/icons-material/PeopleAlt";
import HandshakeIcon from "@mui/icons-material/Handshake";
import DomainIcon from "@mui/icons-material/Domain";
import GavelIcon from "@mui/icons-material/Gavel";
import ShieldMoonIcon from "@mui/icons-material/ShieldMoon";

import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";
import { format } from "date-fns";
import axios from "axios";

// ---------- API ----------
const API_BASE = "http://127.0.0.1:8000";
const API = {
  current: `${API_BASE}/form-submissions/current`,
  historic: `${API_BASE}/form-submissions/historic`,
  submit: `${API_BASE}/form-submissions/`,
};

// ---------- helpers ----------
const themeIcon = (theme) => {
  const map = {
    Carbon: <WhatshotIcon />,
    Energy: <EnergySavingsLeafIcon />,
    Water: <WaterDropIcon />,
    Waste: <RecyclingIcon />,
    "Climate Risk": <ShieldMoonIcon />,
    Workforce: <GroupsIcon />,
    "Customer & Community": <PeopleAltIcon />,
    "Board & Management": <DomainIcon />,
    "Ethics & Compliance": <GavelIcon />,
    "Shareholder Rights": <ShieldMoonIcon />,
    "Cybersecurity & Risk": <VerifiedUserIcon />,
    "Stakeholder Engagement": <HandshakeIcon />,
  };
  return map[theme] || <InfoOutlinedIcon />;
};

const isRegexEnum = (f) => f.type === "regex" && typeof f.pattern === "string";
const enumOptions = (pattern) => {
  const m = pattern.match(/\(([^)]+)\)/);
  return m ? m[1].split("|") : [];
};

// =====================================================================
//                             ESGForm
// =====================================================================
export default function ESGForm({ schema }) {
  // ---------------- state ----------------
  const [period, setPeriod] = useState(new Date());
  const [tab, setTab] = useState(0); // 0 = detailed, 1 = KPI

  // form values & validation
  const [values, setValues] = useState({});
  const [errors, setErrors] = useState({});

  // fetched data maps: { [field]: { value, reporting_period } }
  const [currentData, setCurrentData] = useState({});
  const [historicData, setHistoricData] = useState({});

  // UX
  const [loading, setLoading] = useState(false);
  const [snackbar, setSnackbar] = useState({ open: false, msg: "", severity: "info" });
  const [openAccordions, setOpenAccordions] = useState({});
  const toggleAccordion = (key) =>
    setOpenAccordions((prev) => ({ ...prev, [key]: !prev[key] }));

  // Dialog for “Fetch ESG Data”
  const [dialogOpen, setDialogOpen] = useState(false);
  const [dialogTab, setDialogTab] = useState("current"); // "current" | "historic"

  // track if we already seeded form with fetched current values (prevents cursor freeze)
  const [seededFromCurrent, setSeededFromCurrent] = useState(false);

  // ---------------- meta for category styling ----------------
  const categoryMeta = {
    Environmental: {
      icon: <EnergySavingsLeafIcon color="success" />,
      title: "#2e7d32",
      bg: "#f1f8e9",
      border: "#aed581",
    },
    Social: {
      icon: <GroupsIcon color="primary" />,
      title: "#0d47a1",
      bg: "#e3f2fd",
      border: "#64b5f6",
    },
    Governance: {
      icon: <GavelIcon color="secondary" />,
      title: "#4a148c",
      bg: "#f3e5f5",
      border: "#ba68c8",
    },
  };

  // ---------------- derive schema -> category/theme grouping ----------------
  const schemaByCategoryTheme = useMemo(() => {
    if (!Array.isArray(schema)) return {};
    const filtered = schema.filter((f) => (tab === 1 ? f.method === "kpi" : f.method !== "kpi"));
    const byCat = {};
    for (const f of filtered) {
      if (!byCat[f.category]) byCat[f.category] = {};
      if (!byCat[f.category][f.theme]) byCat[f.category][f.theme] = [];
      byCat[f.category][f.theme].push(f);
    }
    return byCat;
  }, [schema, tab]);

  // ---------------- fetches ----------------
  const seedValuesFromMapOnce = useCallback((map) => {
  setValues((prev) => {
    // ✅ Do not reseed if user has already typed something
    if (Object.keys(prev).length > 0) return prev;

    const seeded = {};
    Object.entries(map).forEach(([name, info]) => {
      seeded[name] = info?.value ?? "";
      seeded[`${name}_isKpi`] = false;
    });
    return seeded;
  });
}, []);

  const fetchCurrentData = useCallback(async () => {
    try {
      setLoading(true);
      const params = { company_id: 1, is_current: true }; // no methodology filter
      const { data } = await axios.get(API.current, { params });

      const arr = Array.isArray(data) ? data : data?.submissions || data?.data || [];
      const map = {};
      arr.forEach((row) => {
        map[row.form_field] = {
          value: row.field_value,
          reporting_period: row.reporting_period,
        };
      });
      setCurrentData(map);

      // seed once (prevents cursor freeze)
      if (!seededFromCurrent) {
        seedValuesFromMapOnce(map);
        setSeededFromCurrent(true);
      }

      setSnackbar({ open: true, severity: "success", msg: "Loaded current ESG data." });
    } catch (e) {
      console.warn("Could not fetch current form submissions:", e);
      setSnackbar({ open: true, severity: "error", msg: "Failed to load current ESG data." });
    } finally {
      setLoading(false);
    }
  }, [seedValuesFromMapOnce, seededFromCurrent]);

  const fetchHistoricData = useCallback(async () => {
    try {
      setLoading(true);
      const params = { company_id: 1, is_current: false }; // <- historic
      const { data } = await axios.get(API.historic, { params });

      const arr = Array.isArray(data) ? data : data?.submissions || data?.data || [];
      const map = {};
      arr.forEach((row) => {
        map[row.form_field] = {
          value: row.field_value,
          reporting_period: row.reporting_period,
        };
      });
      setHistoricData(map);
      setSnackbar({ open: true, severity: "success", msg: "Loaded historic ESG data." });
    } catch (e) {
      console.warn("Could not fetch historic form submissions:", e);
      setSnackbar({ open: true, severity: "error", msg: "Failed to load historic ESG data." });
    } finally {
      setLoading(false);
    }
  }, []);

  // initial current fetch once schema is present
  useEffect(() => {
    if (schema && !seededFromCurrent) fetchCurrentData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [schema]);

  // ---------------- change handlers (NO number coercion while typing) ----------------
  const setField = useCallback((name, val) => {
    setValues((prev) => ({ ...prev, [name]: val }));
  }, []);

  const handleNumberChange = useCallback(
    (name) => (e) => {
      // keep raw string to avoid cursor jumps
      setField(name, e.target.value);
    },
    [setField]
  );

  const handleBooleanChange = useCallback(
    (name) => (e) => {
      setField(name, e.target.checked);
    },
    [setField]
  );

  const handleRegexChange = useCallback(
    (name) => (e) => {
      setField(name, e.target.value);
    },
    [setField]
  );

  // ---------------- submit ----------------
  const handleSubmit = useCallback(async () => {
    if (!Array.isArray(schema)) return;
    const periodStr = format(period, "yyyy-MM-dd");

    const allFields = schema; // use full schema; we filter by presence in values
    const payload = [];

    for (const f of allFields) {
      if (!(f.name in values)) continue;

      let val = values[f.name];

      // validation & normalization
      if (f.type === "numeric") {
        if (val === "" || val == null) continue;
        const n = Number(val);
        if (Number.isNaN(n)) {
          // record error but keep going
          setErrors((prev) => ({ ...prev, [f.name]: "Must be a number" }));
          continue;
        }
        val = n;
      } else if (f.type === "boolean") {
        val = Boolean(val);
      } else if (isRegexEnum(f)) {
        if (!val) continue;
        val = String(val);
      } else {
        if (val === "" || val == null) continue;
        val = String(val);
      }

      const kpiOverride = Boolean(values[`${f.name}_isKpi`]);
      payload.push({
        company_id: 1,
        reporting_period: periodStr, // <- IMPORTANT
        form_field: f.name,
        field_value: val,
        is_kpi: kpiOverride,
        methodology: kpiOverride ? "kpi" : "input",
        is_current: true,
      });
    }

    if (payload.length === 0) {
      setSnackbar({ open: true, severity: "info", msg: "Nothing to submit." });
      return;
    }

    try {
      await axios.post(API.submit, payload);
      setSnackbar({ open: true, severity: "success", msg: "Saved." });
      // refresh current after save
      setSeededFromCurrent(false); // allow reseed if there were new fields
      fetchCurrentData();
    } catch (e) {
      console.error("Error submitting:", e);
      setSnackbar({
        open: true,
        severity: "error",
        msg: "Submit failed. Check required fields and date.",
      });
    }
  }, [schema, values, period, fetchCurrentData]);

  // ---------------- field renderer ----------------
  const Field = ({ f }) => {
    const current = currentData[f.name]?.value;

    if (f.type === "numeric") {
      return (
        <Stack spacing={1}>
          <Stack direction="row" alignItems="center" spacing={1}>
            <Typography variant="body2" fontWeight={600}>
              {f.label}
            </Typography>
            {f.unit && <Chip size="small" label={f.unit} />}
            {f.reference && (
              <Tooltip title={String(f.reference)}>
                <InfoOutlinedIcon fontSize="small" sx={{ opacity: 0.7 }} />
              </Tooltip>
            )}
          </Stack>

          <TextField
            // keep raw string to avoid cursor jump
            value={values[f.name] ?? ""}
            onChange={handleNumberChange(f.name)}
            placeholder={current != null ? `Current: ${current}` : ""}
            fullWidth
            inputProps={{ inputMode: "decimal" }}
            InputProps={{
              endAdornment: f.unit ? (
                <InputAdornment position="end">{f.unit}</InputAdornment>
              ) : null,
            }}
            error={Boolean(errors[f.name])}
            helperText={errors[f.name] || " "}
          />
        </Stack>
      );
    }

    if (f.type === "boolean") {
      return (
        <Stack spacing={0.5}>
          <Stack direction="row" alignItems="center" spacing={1}>
            <Typography variant="body2" fontWeight={600}>
              {f.label}
            </Typography>
            {f.reference && (
              <Tooltip title={String(f.reference)}>
                <InfoOutlinedIcon fontSize="small" sx={{ opacity: 0.7 }} />
              </Tooltip>
            )}
          </Stack>

          <FormControlLabel
            control={
              <Switch
                checked={Boolean(values[f.name] ?? false)}
                onChange={handleBooleanChange(f.name)}
              />
            }
            label={Boolean(values[f.name] ?? false) ? "Yes" : "No"}
          />
          {errors[f.name] && (
            <Typography variant="caption" color="error">
              {errors[f.name]}
            </Typography>
          )}
        </Stack>
      );
    }

    if (isRegexEnum(f)) {
      const options = enumOptions(f.pattern);
      return (
        <Stack spacing={1}>
          <Stack direction="row" alignItems="center" spacing={1}>
            <Typography variant="body2" fontWeight={600}>
              {f.label}
            </Typography>
            {f.reference && (
              <Tooltip title={String(f.reference)}>
                <InfoOutlinedIcon fontSize="small" sx={{ opacity: 0.7 }} />
              </Tooltip>
            )}
          </Stack>

          <TextField
            select
            SelectProps={{ native: true }}
            value={values[f.name] ?? ""}
            onChange={handleRegexChange(f.name)}
            fullWidth
            error={Boolean(errors[f.name])}
            helperText={errors[f.name] || " "}
          >
            <option value="" />
            {options.map((opt) => (
              <option key={opt} value={opt}>
                {opt.replaceAll("_", " ")}
              </option>
            ))}
          </TextField>
        </Stack>
      );
    }

    // default text
    return (
      <Stack spacing={1}>
        <Stack direction="row" alignItems="center" spacing={1}>
          <Typography variant="body2" fontWeight={600}>
            {f.label}
          </Typography>
          {f.reference && (
            <Tooltip title={String(f.reference)}>
              <InfoOutlinedIcon fontSize="small" sx={{ opacity: 0.7 }} />
            </Tooltip>
          )}
        </Stack>
        <TextField
          value={values[f.name] ?? ""}
          onChange={(e) => setField(f.name, e.target.value)}
          fullWidth
        />
      </Stack>
    );
  };

  // ---------------- UI ----------------
  if (!Array.isArray(schema)) {
    return (
      <Box p={3}>
        <Alert severity="error">Schema not available.</Alert>
      </Box>
    );
  }

  return (
    <Box p={2} component={Paper} elevation={0} sx={{ borderRadius: 3 }}>
      {/* Header */}
      <Stack direction="row" alignItems="center" justifyContent="space-between" sx={{ mb: 2 }}>
        <Typography variant="h5" fontWeight={800}>
          ESG Data Entry
        </Typography>
        <LocalizationProvider dateAdapter={AdapterDateFns}>
          <DatePicker
            views={["year", "month", "day"]}
            label="Reporting period"
            value={period}
            onChange={(d) => d && setPeriod(d)}
            slotProps={{ textField: { size: "small" } }}
          />
        </LocalizationProvider>
      </Stack>

      {/* Tabs */}
      <Typography variant="subtitle1" fontWeight={600} sx={{ mb: 1 }}>
        Choose method to enter ESG data
      </Typography>
      <Tabs value={tab} onChange={(_, v) => setTab(v)} sx={{ mb: 2 }}>
        <Tab label="Detailed Entry" />
        <Tab label="Direct KPI Entry" />
      </Tabs>

      {/* Actions */}
      <Stack direction="row" spacing={1} sx={{ mb: 2 }}>
        <Button
          variant="outlined"
          onClick={async () => {
            await fetchCurrentData();
            setDialogTab("current");
            setDialogOpen(true);
          }}
        >
          Fetch ESG Data (Current)
        </Button>
        <Button
          variant="outlined"
          onClick={async () => {
            await fetchHistoricData();
            setDialogTab("historic");
            setDialogOpen(true);
          }}
        >
          Fetch ESG Data (Historic)
        </Button>
      </Stack>

      {/* Body */}
      {loading ? (
        <Box p={3} display="flex" alignItems="center" justifyContent="center">
          <CircularProgress />
        </Box>
      ) : (
        <Stack spacing={2}>
          {Object.entries(schemaByCategoryTheme).map(([category, themes]) => (
            <Card
              key={category}
              elevation={0}
              sx={{
                borderRadius: 3,
                border: `1px solid ${categoryMeta[category]?.border || "#ccc"}`,
                background: categoryMeta[category]?.bg || "#fafafa",
              }}
            >
              <CardHeader
                title={
                  <Stack direction="row" alignItems="center" spacing={1.25}>
                    {categoryMeta[category]?.icon}
                    <Typography
                      variant="h6"
                      sx={{ color: categoryMeta[category]?.title, fontWeight: 700 }}
                    >
                      {category}
                    </Typography>
                  </Stack>
                }
                sx={{ pb: 0.5 }}
              />
              <CardContent sx={{ pt: 1 }}>
                <Stack spacing={1.5}>
                  {Object.entries(themes).map(([theme, fields]) => (
                    <Accordion
                      key={`${category}-${theme}`}
                      expanded={Boolean(openAccordions[`${category}-${theme}`])}
                      onChange={() => toggleAccordion(`${category}-${theme}`)}
                      disableGutters
                      elevation={0}
                      sx={{ borderRadius: 2, border: "1px solid rgba(0,0,0,0.06)", mb: 1.5 }}
                    >
                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                        <Stack direction="row" alignItems="center" spacing={1}>
                          {themeIcon(theme)}
                          <Typography fontWeight={700}>{theme}</Typography>
                        </Stack>
                      </AccordionSummary>
                      <AccordionDetails>
                        <Box
                          sx={{
                            display: "grid",
                            gridTemplateColumns: "repeat(12, 1fr)",
                            gap: 2,
                          }}
                        >
                          {fields.map((f) => (
                            <Box key={f.name} sx={{ gridColumn: "span 6" }}>
                              <Box
                                sx={{
                                  p: 2,
                                  borderRadius: 2,
                                  bgcolor: "background.paper",
                                  boxShadow:
                                    "0 1px 1px rgba(0,0,0,0.02), 0 1px 2px rgba(0,0,0,0.04)",
                                }}
                              >
                                <Field f={f} />
                                <Divider sx={{ my: 1 }} />

                                {/* KPI toggle */}
                                <FormControlLabel
                                  control={
                                    <Switch
                                      checked={Boolean(values[`${f.name}_isKpi`])}
                                      onChange={(e) =>
                                        setValues((prev) => ({
                                          ...prev,
                                          [`${f.name}_isKpi`]: e.target.checked,
                                        }))
                                      }
                                    />
                                  }
                                  label="Mark as KPI"
                                />

                                <Stack direction="row" spacing={1} alignItems="center">
                                  <Chip size="small" variant="outlined" label={f.name} />
                                  {currentData[f.name]?.reporting_period && (
                                    <Typography variant="caption" sx={{ opacity: 0.7 }}>
                                      last: {currentData[f.name]?.reporting_period}
                                    </Typography>
                                  )}
                                </Stack>
                              </Box>
                            </Box>
                          ))}
                        </Box>
                      </AccordionDetails>
                    </Accordion>
                  ))}
                </Stack>
              </CardContent>
            </Card>
          ))}
        </Stack>
      )}

      {/* Footer actions */}
      <Stack direction="row" spacing={1.5} sx={{ mt: 3 }} justifyContent="flex-end">
        <Button variant="outlined" onClick={() => setValues({})}>
          Clear changes
        </Button>
        <Button variant="contained" onClick={handleSubmit}>
          Save
        </Button>
      </Stack>

      {/* Dialog */}
      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} fullWidth maxWidth="md">
        <DialogTitle>ESG Data</DialogTitle>
        <DialogContent dividers>
          <Tabs value={dialogTab} onChange={(_, v) => setDialogTab(v)} sx={{ mb: 2 }}>
            <Tab label="Current" value="current" />
            <Tab label="Historic" value="historic" />
          </Tabs>

          {dialogTab === "current" ? (
            <Box>
              {Object.keys(currentData).length === 0 ? (
                <Typography>No current data available.</Typography>
              ) : (
                Object.entries(currentData).map(([field, info]) => (
                  <Typography key={field} sx={{ mb: 1 }}>
                    <strong>{field}</strong>: {String(info.value)} (period {info.reporting_period})
                  </Typography>
                ))
              )}
            </Box>
          ) : (
            <Box>
              {Object.keys(historicData).length === 0 ? (
                <Typography>No historic data available.</Typography>
              ) : (
                Object.entries(historicData).map(([field, info]) => (
                  <Typography key={field} sx={{ mb: 1 }}>
                    <strong>{field}</strong>: {String(info.value)} (period {info.reporting_period})
                  </Typography>
                ))
              )}
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>Close</Button>
        </DialogActions>
      </Dialog>

      {/* Snack */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={3500}
        onClose={() => setSnackbar((s) => ({ ...s, open: false }))}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert
          onClose={() => setSnackbar((s) => ({ ...s, open: false }))}
          severity={snackbar.severity}
          sx={{ width: "100%" }}
        >
          {snackbar.msg}
        </Alert>
      </Snackbar>
    </Box>
  );
}
